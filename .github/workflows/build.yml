name: Semantic Versioning

on:
  push:
    branches:
      - main

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 Git 히스토리 가져오기 (태그 포함)

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Fetch Tags (Ensure latest tags are available)
        run: git fetch --tags

      - name: Get Last Version
        id: last_version
        run: |
          LAST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo '0.0.0')
          echo "LAST_VERSION=${LAST_VERSION//v/}" >> $GITHUB_ENV

      - name: Determine Next Version
        id: version
        run: |
          # 기존 버전 가져오기
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_VERSION:-0.0.0}"

          # 기본값 보완
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}

          # 커밋 메시지 확인
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)

          if echo "$COMMIT_MESSAGE" | grep -q "BREAKING CHANGE:"; then
            ((MAJOR++))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MESSAGE" | grep -q "feat:"; then
            ((MINOR++))
            PATCH=0
          elif echo "$COMMIT_MESSAGE" | grep -q "fix:"; then
            ((PATCH++))
          else
            echo "No version bump needed."
            echo "SKIP=true" >> $GITHUB_ENV
            exit 0
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update gradle.properties
        if: env.SKIP != 'true'
        run: |
          echo "version=${{ env.NEW_VERSION }}" > gradle.properties

      - name: Commit and Push New Version
        if: env.SKIP != 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add gradle.properties
          git commit -m "🔖 Bump version to ${{ env.NEW_VERSION }}"
          git tag v${{ env.NEW_VERSION }}
          git push origin main --tags